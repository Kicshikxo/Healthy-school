generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Municipality {
    id                      String                    @id(map: "municipalities_pkey") @default(dbgenerated("gen_random_uuid()")) @map("municipality_id") @db.Uuid
    name                    String                    @unique @map("municipality_name") @db.VarChar(255)
    EducationalOrganization EducationalOrganization[]

    @@map("municipalities")
}

model EducationalOrganization {
    id             String       @id(map: "educational_organizations_pkey") @default(dbgenerated("gen_random_uuid()")) @map("organization_id") @db.Uuid
    municipality   Municipality @relation(fields: [municipalityId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    municipalityId String       @map("municipality_id") @db.Uuid
    name           String       @unique @map("organization_name") @db.VarChar(255)
    users          User[]
    classes        Class[]

    @@map("educational_organizations")
}

model User {
    id             String                  @id(map: "user_pkey") @default(dbgenerated("gen_random_uuid()")) @map("user_id") @db.Uuid
    organization   EducationalOrganization @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    organizationId String                  @map("organization_id") @db.Uuid
    role           Role                    @map("role")
    username       String                  @unique @map("username") @db.VarChar(64)
    password       String                  @map("password") @db.Char(60)
    secondName     String                  @map("second_name") @db.VarChar(64)
    firstName      String                  @map("first_name") @db.VarChar(64)
    middleName     String                  @map("middle_name") @db.VarChar(64)
    createdAt      DateTime                @default(now()) @map("created_at")
    updatedAt      DateTime                @default(now()) @updatedAt @map("updated_at")

    @@map("users")
}

model Class {
    id             String                  @id(map: "classes_pkey") @default(dbgenerated("gen_random_uuid()")) @map("class_id") @db.Uuid
    organization   EducationalOrganization @relation(fields: [organizationId], references: [id])
    organizationId String                  @map("organization_id") @db.Uuid
    number         Int                     @map("number")
    liter          String                  @map("liter") @db.Char(1)
    academicYear   String                  @map("academic_year") @db.Char(9)
    students       Student[]

    @@map("classes")
}

model Student {
    id         String   @id(map: "children_pkey") @default(dbgenerated("gen_random_uuid()")) @map("student_id") @db.Uuid
    class      Class    @relation(fields: [classId], references: [id])
    classId    String   @map("class_id") @db.Uuid
    snils      String   @unique @map("snils") @db.Char(14)
    secondName String   @map("second_name") @db.VarChar(64)
    firstName  String   @map("first_name") @db.VarChar(64)
    middleName String   @map("middle_name") @db.VarChar(64)
    gender     Gender   @map("gender")
    birthdate  DateTime @map("birthdate")
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

    physicalHealth      PhysicalHealth?
    medicalHealth       MedicalHealth?
    socialHealth        SocialHealth?
    pedagogueHealth     PedagogueHealth?
    psychologicalHealth PsychologicalHealth?

    @@map("students")
}

model PhysicalHealth {
    studentId       String                         @id(map: "physical_health_pkey") @map("student_id") @db.Uuid
    student         Student                        @relation(fields: [studentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    healthGroup     HealthGroup?                   @default(dbgenerated("'BASIC'")) @map("health_group")
    recommendations PhysicalHealthRecommendation[] @relation(name: "student_physical_health_recommendations")
    specialistNotes String?                        @map("specialist_notes")

    @@map("student_physical_health")
}

model PhysicalHealthRecommendation {
    id             Int              @id(map: "physical_health_recommendations_pkey") @default(autoincrement()) @map("recommendation_id")
    title          String           @map("title")
    healthZone     HealthZone       @map("health_zone")
    healthGroup    HealthGroup      @map("health_group")
    physicalHealth PhysicalHealth[] @relation(name: "student_physical_health_recommendations")

    @@map("physical_health_recommendations")
}

model SocialHealth {
    studentId       String                       @id(map: "student_social_health_pkey") @map("student_id") @db.Uuid
    student         Student                      @relation(fields: [studentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    indicators      SocialHealthIndicator[]      @relation(name: "student_social_health_indicators")
    recommendations SocialHealthRecommendation[] @relation(name: "student_social_health_recommendations")

    @@map("student_social_health")
}

model SocialHealthIndicator {
    id           Int            @id(map: "social_health_indicators_pkey") @default(autoincrement()) @map("indicator_id")
    title        String         @map("title")
    healthZone   HealthZone     @map("health_zone")
    socialHealth SocialHealth[] @relation(name: "student_social_health_indicators")

    @@map("social_health_indicators")
}

model SocialHealthRecommendation {
    id           Int            @id(map: "social_health_recommendations_pkey") @default(autoincrement()) @map("recommendation_id")
    title        String         @map("title")
    healthZone   HealthZone     @map("health_zone")
    socialHealth SocialHealth[] @relation(name: "student_social_health_recommendations")

    @@map("social_health_recommendations")
}

model MedicalHealth {
    studentId       String                        @id(map: "medical_health_pkey") @map("student_id") @db.Uuid
    student         Student                       @relation(fields: [studentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    options         MedicalHealthOption[]         @relation(name: "student_medical_health_options")
    recommendations MedicalHealthRecommendation[] @relation(name: "student_medical_health_recommendations")
    specialistNotes String?                       @map("specialist_notes")

    @@map("student_medical_health")
}

model MedicalHealthOption {
    id            Int             @id(map: "medical_health_options_pkey") @default(autoincrement()) @map("option_id")
    title         String          @map("title")
    medicalType   MedicalType     @map("medical_type")
    healthZone    HealthZone      @map("health_zone")
    medicalHealth MedicalHealth[] @relation(name: "student_medical_health_options")

    @@map("medical_health_options")
}

model MedicalHealthRecommendation {
    id            Int             @id(map: "medical_health_recommendations_pkey") @default(autoincrement()) @map("recommendation_id")
    title         String          @map("title")
    healthZone    HealthZone      @map("health_zone")
    medicalHealth MedicalHealth[] @relation(name: "student_medical_health_recommendations")

    @@map("medical_health_recommendations")
}

model PedagogueHealth {
    studentId String                  @id(map: "pedagogue_health_pkey") @map("student_id") @db.Uuid
    student   Student                 @relation(fields: [studentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    options   PedagogueHealthOption[] @relation(name: "student_pedagogue_health_options")

    @@map("student_pedagogue_health")
}

model PedagogueHealthOption {
    id              Int               @id(map: "pedagogue_health_options_pkey") @default(autoincrement()) @map("option_id")
    title           String            @map("title")
    healthZone      HealthZone        @map("health_zone")
    pedagogueTab    PedagogueTab      @map("pedagogue_tab")
    pedagogueType   PedagogueType     @map("pedagogue_type")
    pedagogueHealth PedagogueHealth[] @relation(name: "student_pedagogue_health_options")

    @@map("pedagogue_health_options")
}

model PsychologicalHealth {
    studentId String                      @id(map: "psychological_health_pkey") @map("student_id") @db.Uuid
    student   Student                     @relation(fields: [studentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    options   PsychologicalHealthOption[] @relation(name: "student_psychological_health_options")

    @@map("student_psychological_health")
}

model PsychologicalHealthOption {
    id                  Int                   @id(map: "psychological_health_options_pkey") @default(autoincrement()) @map("option_id")
    title               String                @map("title")
    healthZone          HealthZone            @map("health_zone")
    educationType       EducationType         @map("education_type")
    psychologicalType   PsychologicalType     @map("psychological_type")
    psychologicalHealth PsychologicalHealth[] @relation(name: "student_psychological_health_options")

    @@map("psychological_health_options")
}

enum Role {
    OPERATOR
    CLASS_TEACHER
    HEALTH_WORKER
    PEDAGOGUE
    SOCIAL_PEDAGOGUE
    PSYCHOLOGIST
    PHYSICAL_EDUCATION_TEACHER
}

enum Gender {
    MALE
    FEMALE
}

enum HealthZone {
    GREEN
    YELLOW
    RED
}

enum HealthGroup {
    BASIC
    PREPARATORY
    SPECIAL
}

enum EducationType {
    PRIMARY
    BASIC
    MIDDLE
}

enum MedicalType {
    DISABILITY
    MORBIDITY
    BALANCED_DIET
    CHRONIC_DISEASES

    VISION
    HEARING
    ORTHOPEDIA
    GASTROINTESTINAL
    NEUROLOGY_PSYCHIATRY
}

enum PedagogueTab {
    PEDAGOGUE
    SPEECH_THERAPIST
}

enum PedagogueType {
    UNDERSTANDING_INSTRUCTIONS
    MASTERING_EDUCATION
    WORK_PACE
    ACTIVITY_SPECIFICS
    WORKABILITY
    HEALTH_LIMITATIONS
    DISABILITY

    VOICE_DISORDERS
    TEMPO_RHYTHMIC_DISORDERS
    SPELLING_DISORDERS
    ANATOMO_PHYSIOLOGICAL_DEFECTS
    INNERVATION_DISORDERS
    STRUCTURAL_SEMANTIC_DISORDERS
    WRITING_DISORDERS
    READING_DISORDERS
}

enum PsychologicalType {
    CULTURAL_VALUES
    MOTIVATION
    ADAPTATION
    SOCIOMETRY
    SELF_ASSESSMENT
    ACCENTUATIONS
    ANXIETY
    PERSONAL_ANXIETY
    AGGRESSIVITY
    EXTRACURRICULAR_ABILITIES
    DEVIANT_BEHAVIOR
    PROFESSIONAL_INTERESTS
    BULLYING
    CONFLICTUALITY
}
