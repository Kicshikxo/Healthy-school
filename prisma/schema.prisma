generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Municipality {
    id                      String                    @id(map: "municipalities_pkey") @default(dbgenerated("gen_random_uuid()")) @map("municipality_id") @db.Uuid
    name                    String                    @unique @map("municipality_name") @db.VarChar(255)
    EducationalOrganization EducationalOrganization[]

    @@map("municipalities")
}

model EducationalOrganization {
    id             String       @id(map: "educational_organizations_pkey") @default(dbgenerated("gen_random_uuid()")) @map("organization_id") @db.Uuid
    municipality   Municipality @relation(fields: [municipalityId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    municipalityId String       @map("municipality_id") @db.Uuid
    name           String       @unique @map("organization_name") @db.VarChar(255)
    users          User[]
    classes        Class[]

    @@map("educational_organizations")
}

model User {
    id             String                  @id(map: "user_pkey") @default(dbgenerated("gen_random_uuid()")) @map("user_id") @db.Uuid
    organization   EducationalOrganization @relation(fields: [organizationId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    organizationId String                  @map("organization_id") @db.Uuid
    role           Role                    @map("role")
    username       String                  @unique @map("username") @db.VarChar(64)
    password       String                  @map("password") @db.Char(60)
    secondName     String                  @map("second_name") @db.VarChar(64)
    firstName      String                  @map("first_name") @db.VarChar(64)
    middleName     String                  @map("middle_name") @db.VarChar(64)
    createdAt      DateTime                @default(now()) @map("created_at")
    updatedAt      DateTime                @default(now()) @updatedAt @map("updated_at")

    @@map("users")
}

model Class {
    id             String                  @id(map: "classes_pkey") @default(dbgenerated("gen_random_uuid()")) @map("class_id") @db.Uuid
    organization   EducationalOrganization @relation(fields: [organizationId], references: [id])
    organizationId String                  @map("organization_id") @db.Uuid
    number         Int                     @map("number")
    liter          String                  @map("liter") @db.Char(1)
    academicYear   String                  @map("academic_year") @db.Char(9)
    students       Student[]

    @@map("classes")
}

model Student {
    id         String   @id(map: "children_pkey") @default(dbgenerated("gen_random_uuid()")) @map("student_id") @db.Uuid
    class      Class    @relation(fields: [classId], references: [id])
    classId    String   @map("class_id") @db.Uuid
    snils      String   @unique @map("snils") @db.Char(14)
    secondName String   @map("second_name") @db.VarChar(64)
    firstName  String   @map("first_name") @db.VarChar(64)
    middleName String   @map("middle_name") @db.VarChar(64)
    gender     Gender   @map("gender")
    birthdate  DateTime @map("birthdate")
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

    medicalHealth       MedicalHealth?
    pedagogueHealth     PedagogueHealth?
    physicalHealth      PhysicalHealth?
    psychologicalHealth PsychologicalHealth?
    socialHealth        SocialHealth?

    @@map("students")
}

model MedicalHealth {
    studentId       String                @id(map: "medical_health_pkey") @map("student_id") @db.Uuid
    student         Student               @relation(fields: [studentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    specialistNotes String?               @map("specialist_notes")
    options         MedicalHealthOption[] @relation(name: "student_medical_health_options")
    logs            MedicalHealthLog[]

    @@map("student_medical_health")
}

model MedicalHealthOption {
    id              Int                                 @id(map: "medical_health_options_pkey") @default(autoincrement()) @map("option_id")
    title           String                              @map("title")
    healthZone      HealthZone                          @map("health_zone")
    medicalType     MedicalType                         @map("medical_type")
    selectionType   SelectionType                       @map("selection_type")
    medicalHealth   MedicalHealth[]                     @relation(name: "student_medical_health_options")
    recommendations MedicalHealthOptionRecommendation[]
    logs            MedicalHealthLog[]

    @@map("medical_health_options")
}

model MedicalHealthLog {
    id              Int                 @id(map: "student_medical_health_logs_pkey") @default(autoincrement()) @map("log_id")
    medicalHealth   MedicalHealth?      @relation(fields: [medicalHealthId], references: [studentId], onUpdate: Cascade, onDelete: Cascade)
    medicalHealthId String?             @map("medical_health_id") @db.Uuid
    option          MedicalHealthOption @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    optionId        Int                 @map("option_id")
    createdAt       DateTime            @default(now()) @map("created_at")

    @@map("student_medical_health_logs")
}

model MedicalHealthOptionRecommendation {
    id       Int                  @id(map: "medical_health_options_recommendations_pkey") @default(autoincrement()) @map("recommendation_id")
    option   MedicalHealthOption? @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    optionId Int                  @map("option_id")
    title    String               @map("title")

    @@map("medical_health_options_recommendations")
}

model PedagogueHealth {
    studentId String                  @id(map: "pedagogue_health_pkey") @map("student_id") @db.Uuid
    student   Student                 @relation(fields: [studentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    options   PedagogueHealthOption[] @relation(name: "student_pedagogue_health_options")
    logs      PedagogueHealthLog[]

    @@map("student_pedagogue_health")
}

model PedagogueHealthOption {
    id              Int                                   @id(map: "pedagogue_health_options_pkey") @default(autoincrement()) @map("option_id")
    title           String                                @map("title")
    healthZone      HealthZone                            @map("health_zone")
    pedagogueTab    PedagogueTab                          @map("pedagogue_tab")
    pedagogueType   PedagogueType                         @map("pedagogue_type")
    selectionType   SelectionType                         @map("selection_type")
    pedagogueHealth PedagogueHealth[]                     @relation(name: "student_pedagogue_health_options")
    recommendations PedagogueHealthOptionRecommendation[]
    logs            PedagogueHealthLog[]

    @@map("pedagogue_health_options")
}

model PedagogueHealthLog {
    id                Int                   @id(map: "student_pedagogue_health_logs_pkey") @default(autoincrement()) @map("log_id")
    pedagogueHealth   PedagogueHealth?      @relation(fields: [pedagogueHealthId], references: [studentId], onUpdate: Cascade, onDelete: Cascade)
    pedagogueHealthId String?               @map("pedagogue_health_id") @db.Uuid
    option            PedagogueHealthOption @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    optionId          Int                   @map("option_id")
    createdAt         DateTime              @default(now()) @map("created_at")

    @@map("student_pedagogue_health_logs")
}

model PedagogueHealthOptionRecommendation {
    id       Int                    @id(map: "pedagogue_health_options_recommendations_pkey") @default(autoincrement()) @map("recommendation_id")
    option   PedagogueHealthOption? @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    optionId Int                    @map("option_id")
    title    String                 @map("title")

    @@map("pedagogue_health_options_recommendations")
}

model PhysicalHealth {
    studentId   String                 @id(map: "physical_health_pkey") @map("student_id") @db.Uuid
    student     Student                @relation(fields: [studentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    healthGroup HealthGroup            @default(BASIC) @map("health_group")
    options     PhysicalHealthOption[] @relation(name: "student_physical_health_options")
    logs        PhysicalHealthLog[]

    @@map("student_physical_health")
}

model PhysicalHealthOption {
    id              Int                                   @id(map: "physical_health_options_pkey") @default(autoincrement()) @map("option_id")
    title           String                                @map("title")
    healthZone      HealthZone                            @map("health_zone")
    healthGroup     HealthGroup                           @map("health_group")
    physicalType    PhysicalType                          @map("physical_type")
    selectionType   SelectionType                         @map("selection_type")
    physicalHealth  PhysicalHealth[]                      @relation(name: "student_physical_health_options")
    recommendations PhysicallHealthOptionRecommendation[]
    logs            PhysicalHealthLog[]

    @@map("physical_health_options")
}

model PhysicalHealthLog {
    id               Int                  @id(map: "student_physical_health_logs_pkey") @default(autoincrement()) @map("log_id")
    physicalHealth   PhysicalHealth?      @relation(fields: [physicalHealthId], references: [studentId], onUpdate: Cascade, onDelete: Cascade)
    physicalHealthId String?              @map("physical_health_id") @db.Uuid
    option           PhysicalHealthOption @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    optionId         Int                  @map("option_id")
    createdAt        DateTime             @default(now()) @map("created_at")

    @@map("student_physical_health_logs")
}

model PhysicallHealthOptionRecommendation {
    id       Int                   @id(map: "physical_health_options_recommendations_pkey") @default(autoincrement()) @map("recommendation_id")
    option   PhysicalHealthOption? @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    optionId Int                   @map("option_id")
    title    String                @map("title")

    @@map("physical_health_options_recommendations")
}

model PsychologicalHealth {
    studentId       String                      @id(map: "psychological_health_pkey") @map("student_id") @db.Uuid
    student         Student                     @relation(fields: [studentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    specialistNotes String?                     @map("specialist_notes")
    options         PsychologicalHealthOption[] @relation(name: "student_psychological_health_options")
    logs            PsychologicalHealthLog[]

    @@map("student_psychological_health")
}

model PsychologicalHealthOption {
    id                  Int                                       @id(map: "psychological_health_options_pkey") @default(autoincrement()) @map("option_id")
    title               String                                    @map("title")
    healthZone          HealthZone                                @map("health_zone")
    educationType       EducationType                             @map("education_type")
    psychologicalType   PsychologicalType                         @map("psychological_type")
    selectionType       SelectionType                             @map("selection_type")
    psychologicalHealth PsychologicalHealth[]                     @relation(name: "student_psychological_health_options")
    recommendations     PsychologicalHealthOptionRecommendation[]
    logs                PsychologicalHealthLog[]

    @@map("psychological_health_options")
}

model PsychologicalHealthLog {
    id                    Int                       @id(map: "student_psychological_health_logs_pkey") @default(autoincrement()) @map("log_id")
    psychologicalHealth   PsychologicalHealth?      @relation(fields: [psychologicalHealthId], references: [studentId], onUpdate: Cascade, onDelete: Cascade)
    psychologicalHealthId String?                   @map("psychological_health_id") @db.Uuid
    option                PsychologicalHealthOption @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    optionId              Int                       @map("option_id")
    createdAt             DateTime                  @default(now()) @map("created_at")

    @@map("student_psychological_health_logs")
}

model PsychologicalHealthOptionRecommendation {
    id       Int                        @id(map: "psychological_health_options_recommendations_pkey") @default(autoincrement()) @map("recommendation_id")
    option   PsychologicalHealthOption? @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    optionId Int                        @map("option_id")
    title    String                     @map("title")

    @@map("psychological_health_options_recommendations")
}

model SocialHealth {
    studentId String               @id(map: "student_social_health_pkey") @map("student_id") @db.Uuid
    student   Student              @relation(fields: [studentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    options   SocialHealthOption[] @relation(name: "student_social_health_options")
    logs      SocialHealthLog[]

    @@map("student_social_health")
}

model SocialHealthOption {
    id              Int                                @id(map: "social_health_options_pkey") @default(autoincrement()) @map("option_id")
    title           String                             @map("title")
    healthZone      HealthZone                         @map("health_zone")
    socialType      SocialType                         @map("social_type")
    selectionType   SelectionType                      @map("selection_type")
    socialHealth    SocialHealth[]                     @relation(name: "student_social_health_options")
    recommendations SocialHealthOptionRecommendation[]
    logs            SocialHealthLog[]

    @@map("social_health_options")
}

model SocialHealthLog {
    id             Int                @id(map: "student_social_health_logs_pkey") @default(autoincrement()) @map("log_id")
    socialHealth   SocialHealth?      @relation(fields: [socialHealthId], references: [studentId], onUpdate: Cascade, onDelete: Cascade)
    socialHealthId String?            @map("social_health_id") @db.Uuid
    option         SocialHealthOption @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    optionId       Int                @map("option_id")
    createdAt      DateTime           @default(now()) @map("created_at")

    @@map("student_social_health_logs")
}

model SocialHealthOptionRecommendation {
    id       Int                 @id(map: "social_health_options_recommendations_pkey") @default(autoincrement()) @map("recommendation_id")
    option   SocialHealthOption? @relation(fields: [optionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    optionId Int?                @map("option_id")
    title    String              @map("title")

    @@map("social_health_options_recommendations")
}

model Conclusion {
    id              Int                        @id(map: "conclusions_pkey") @default(autoincrement()) @map("conclusion_id")
    summary         String                     @map("summary")
    healthZone      HealthZone                 @map("health_zone")
    conclusionType  ConclusionType             @map("conclusion_type")
    recommendations ConclusionRecommendation[]

    @@map("conclusions")
}

model ConclusionRecommendation {
    id           Int         @id(map: "conclusions_recommendations_pkey") @default(autoincrement()) @map("recommendation_id")
    conclusion   Conclusion? @relation(fields: [conclusionId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    conclusionId Int         @map("conclusion_id")
    title        String      @map("title")

    @@map("conclusions_recommendations")
}

enum Role {
    OPERATOR
    CLASS_TEACHER
    HEALTH_WORKER
    PEDAGOGUE
    PHYSICAL_EDUCATION_TEACHER
    PSYCHOLOGIST
    SOCIAL_PEDAGOGUE
}

enum ConclusionType {
    MEDICAL
    PEDAGOGUE
    SPEECH
    PHYSICAL
    PSYCHOLOGICAL
    SOCIAL
}

enum Gender {
    MALE
    FEMALE
}

enum HealthZone {
    GREEN
    YELLOW
    RED
}

enum HealthGroup {
    BASIC
    PREPARATORY
    SPECIAL
}

enum EducationType {
    PRIMARY
    BASIC
    MIDDLE
}

enum MedicalType {
    HEALTH_GROUP
    DISABILITY
    MORBIDITY
    BALANCED_DIET
    CHRONIC_DISEASES

    VISION
    HEARING
    ORTHOPEDIA
    GASTROINTESTINAL
    NEUROLOGY_PSYCHIATRY
}

enum SelectionType {
    SINGLE
    MULTIPLE
    CHECKBOX
}

enum PedagogueTab {
    PEDAGOGUE
    SPEECH_THERAPIST
}

enum PedagogueType {
    UNDERSTANDING_INSTRUCTIONS
    MASTERING_EDUCATION
    WORK_PACE
    ACTIVITY_SPECIFICS
    WORKABILITY
    HEALTH_LIMITATIONS
    DISABILITY

    VOICE_DISORDERS
    TEMPO_RHYTHMIC_DISORDERS
    SPELLING_DISORDERS
    ANATOMO_PHYSIOLOGICAL_DEFECTS
    INNERVATION_DISORDERS
    STRUCTURAL_SEMANTIC_DISORDERS
    WRITING_DISORDERS
    READING_DISORDERS
}

enum PhysicalType {
    FUNCTIONAL_INDICATORS
    PHYSICAL_DEVELOPMENT
    PHYSICAL_TRAINING
}

enum PsychologicalType {
    CULTURAL_VALUES
    MOTIVATION
    ADAPTATION
    SOCIOMETRY
    SELF_ASSESSMENT
    ACCENTUATIONS
    ANXIETY
    PERSONAL_ANXIETY
    AGGRESSIVITY
    EXTRACURRICULAR_ABILITIES
    DEVIANT_BEHAVIOR
    PROFESSIONAL_INTERESTS
    BULLYING
    CONFLICTUALITY
}

enum SocialType {
    HEALTH_LIMITATIONS
    DEVIANT_BEHAVIOR
    PREVENTIVE_ACCOUNTING
    BAD_HABITS
    ORPHAN
    SOCIAL_RISK
    ADDICTED_FAMILY
    DOMESTIC_ABUSE
    REFUGEE
    SWO_FAMILY
    LOW_INCOME
    CONFLICTUAL_FAMILY_RELATIONS
}
